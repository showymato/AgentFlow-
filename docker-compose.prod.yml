version: '3.8'

services:
  # Production Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: agentflow-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Production PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: agentflow-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Production IPFS
  ipfs:
    image: ipfs/kubo:latest
    container_name: agentflow-ipfs-prod
    volumes:
      - ipfs_prod_data:/data/ipfs
    environment:
      - IPFS_PROFILE=server
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G
    restart: always

  # Production Coordinator with multiple replicas
  coordinator:
    build:
      context: .
      dockerfile: apps/coordinator/Dockerfile
    environment:
      - NODE_ENV=production
      - PORT=8080
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: always

  # Production xNode with auto-scaling
  xnode:
    build:
      context: .
      dockerfile: apps/xnode/Dockerfile
    environment:
      - NODE_ENV=production
      - COORDINATOR_URL=ws://coordinator:8080
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - MAX_CONCURRENT_TASKS=5
      - ENABLE_GPU=${ENABLE_GPU:-false}
    depends_on:
      - coordinator
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'
    restart: always

  # Production Web App
  web:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_COORDINATOR_URL=wss://${DOMAIN}/ws
      - NEXT_PUBLIC_IPFS_GATEWAY=https://${DOMAIN}/ipfs
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=https://${DOMAIN}
    depends_on:
      - postgres
      - coordinator
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    restart: always

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: agentflow-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
      - coordinator
    restart: always

volumes:
  redis_prod_data:
  postgres_prod_data:
  ipfs_prod_data:

networks:
  default:
    name: agentflow-prod-network
